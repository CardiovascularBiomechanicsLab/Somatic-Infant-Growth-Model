function [newVolumes] = rk4_AAH_20220405(currentVolumes, currentPressures, resistances, TimeVector, HLHS, Stage)

%rk4: differential equation solver that computes volume at a time point during the cardiac cycle for each compartment

   %Inputs: 
   %       currentVolumes - volumes in each compartment at the beginning of the time step
   %       currentPressures - pressures in each compartment at the beginning of the time step
   %       resistances - systemic and pulmonary venous and pulmonary resistances as well as characteristic
   %                     resistances and shunt resistances 
   %       TimeVector - vector of size nRows giving the time in the cardiac cycle in seconds
   %       HLHS - flag for hypoplastic left heart syndrome
   %       Stage - what staged surgery has/has not been performed; 0 if has not occurred, 1 if occurred; 
   %               Stage(1) is Norwood/Sano, Stage(2) is Glenn, Stage(3) is Fontan 
   
   %Outputs:
   %       newVolumes - volumes in each compartment throughout the cardiac cycle


   %Volume and Pressure Compartment Designations
    %   Column  Compartment    
    %   1       pulmonary veins
    %   2       left atrium
    %   3       left ventricle
    %   4       aorta
    %   5       systemic arteries - lower body
    %   6       systemic arteries - upper body
    %   7       systemic veins - lower body
    %   8       systemic veins - upper body
    %   9       right atrium
    %   10      right ventricle
    %   11      main pulmonary artery                  
    %   12      pulmonary arteries  
    
    
%% Runge Kutta Algorithm to Solve Differential Equations
        
    stepSize=TimeVector(2)-TimeVector(1); halfStep=stepSize/2; sixthStep=stepSize/6; %cycle computation timing

    if HLHS==1 %the left ventricle does not exist
      currentPressures(3)=0;
    end
  
    
    %% K1
    k1 = [dv1(currentPressures, resistances), ...
          dv2(currentPressures, resistances), ...
          dv3(currentPressures, resistances), ...
          dv4(currentPressures, resistances, Stage(1)), ...
          dv5(currentPressures, resistances), ...
          dv6(currentPressures, resistances), ...
          dv7(currentPressures, resistances, Stage(3)), ...
          dv8(currentPressures, resistances, Stage(2)), ...
          dv9(currentPressures, resistances, Stage(2), Stage(3)), ...
          dv10(currentPressures, resistances, Stage(1)), ...
          dv11(currentPressures, resistances, Stage), ...
          dv12(currentPressures, resistances)];...
        
      %% K2
      P_k2 = currentPressures + halfStep * k1;
      k2 = [dv1(P_k2, resistances), ...
            dv2(P_k2, resistances), ...
            dv3(P_k2, resistances), ...
            dv4(P_k2, resistances, Stage(1)), ...
            dv5(P_k2, resistances), ...
            dv6(P_k2, resistances), ...
            dv7(P_k2, resistances, Stage(3)), ...
            dv8(P_k2, resistances, Stage(2)), ...
            dv9(P_k2, resistances, Stage(2), Stage(3)), ...
            dv10(P_k2, resistances, Stage(1)), ...
            dv11(P_k2, resistances, Stage), ...
            dv12(P_k2, resistances)];

      %% K3
      P_k3 = currentPressures + halfStep * k2;
      k3 =  [dv1(P_k3, resistances), ...
            dv2(P_k3, resistances), ...
            dv3(P_k3, resistances), ...
            dv4(P_k3, resistances, Stage(1)), ...
            dv5(P_k3, resistances), ...
            dv6(P_k3, resistances), ...
            dv7(P_k3, resistances, Stage(3)), ...
            dv8(P_k3, resistances, Stage(2)), ...
            dv9(P_k3, resistances, Stage(2), Stage(3)), ...
            dv10(P_k3, resistances, Stage(1)), ...
            dv11(P_k3, resistances, Stage), ...
            dv12(P_k3, resistances)];
          

      %% K4
      P_k4 = currentPressures  + stepSize * k3;
      k4 =  [dv1(P_k4, resistances), ...
            dv2(P_k4, resistances), ...
            dv3(P_k4, resistances), ...
            dv4(P_k4, resistances, Stage(1)), ...
            dv5(P_k4, resistances), ...
            dv6(P_k4, resistances), ...
            dv7(P_k4, resistances, Stage(3)), ...
            dv8(P_k4, resistances, Stage(2)), ...
            dv9(P_k4, resistances, Stage(2), Stage(3)), ...
            dv10(P_k4, resistances, Stage(1)), ...
            dv11(P_k4, resistances, Stage), ...
            dv12(P_k4, resistances)];
      

      newVolumes = currentVolumes + sixthStep * (k1 + 2 * k2 + 2 * k3 + k4);

end


function deltaVolume = dv1(P, R)
% Calculate volume change of the pulmonary veins 
deltaVolume = ( P(12) - P(1) ) / R(12)   -   ( P(1) - P(2) ) / R(1);
end

function deltaVolume = dv2(P, R)
% Calculate volume change of the left atrium 
RMVBF=R(17); R_ASD=R(14);

deltaVolume = ( P(1) - P(2) ) / R(1)   -   ( P(2) - P(3) ) / R(2) * ( P(2) > P(3) ) ...
               +( P(3) - P(2) ) / RMVBF * ( P(3) > P(2) ) ...
               -( P(2) - P(9) ) / R_ASD;
end

function deltaVolume = dv3(P, R)
% Calculate volume change of the left ventricle
RMVBF=R(17); RAVBF=R(18);

deltaVolume = ( P(2) - P(3) ) / R(2) * ( P(2) > P(3) )   -   ( P(3) - P(4) ) / R(3) * ( P(3) > P(4) ) ...
              +( P(4) - P(3) ) / RAVBF * ( P(4) > P(3) )   -   ( P(3) - P(2) ) / RMVBF * ( P(3) > P(2) );
end

function deltaVolume = dv4(P, R, S1)
% Calculate volume change of the aorta
RAVBF=R(18); R_PDA=R(13); RPVBF=R(20);

deltaVolume = ( P(3) - P(4) ) / R(3) * ( P(3) > P(4) )   -   ( P(4) - P(5) ) / R(4) - ( P(4) - P(6) ) / R(4) ...
                - ( P(4) - P(3) ) / RAVBF   *   ( P(4) > P(3) ) ...
                + ( P(10) - P(4) ) / R(10) * ( P(10) > P(4) ) * (S1) ...
                - ( P(4) - P(10) ) / RPVBF * ( P(4) > P(10) ) * (S1) ...
                + ( P(11) - P(4) ) / ( R(11) + R_PDA );             
end


function deltaVolume = dv5(P, R)
% Calculate volume change of the lower body systemic arteries 
deltaVolume = ( P(4) - P(5) ) / R(4)   -   ( P(5) - P(7) ) / R(5);              
end

function deltaVolume = dv6(P, R)
% Calculate volume change of the upper body systemic arteries
deltaVolume = ( P(4) - P(6) ) / R(4)   -   ( P(6) - P(8) ) / R(6);
end

function deltaVolume = dv7(P, R, S3)
% Calculate volume change of the lower body systemic veins 
deltaVolume = ( P(5) - P(7) ) / R(5)   -   ( P(7) - P(9) ) / R(7) *(~S3) ...
               - ( P(7) - P(11) ) / R(7) * (S3); 
end

function deltaVolume = dv8(P, R, S2)
% Calculate volume change of the upper body systemic veins
deltaVolume = ( P(6) - P(8) ) / R(6)   -   ( P(8) - P(9) ) / R(8) * (~S2) ...
               - ( P(8) - P(11) ) / R(8) * (S2);
end

function deltaVolume = dv9(P, R, S2, S3)
% Calculate volume change of the right atrium
RTVBF=R(19); R_ASD=R(14); R_Fenestration=R(16);

deltaVolume = ( P(7) - P(9) ) / R(7) *(~S3)   -   ( P(9) - P(10) ) / R(9) * ( P(9) > P(10) )   +   ( P(8) - P(9) ) / R(8) * (~S2) ...
              +( P(10) - P(9) ) / RTVBF * ( P(10) > P(9) ) ...
              +( P(2) - P(9) ) / R_ASD ...
              -( P(9) - P(11) ) / R_Fenestration;   
end

function deltaVolume = dv10(P, R, S1 )
% Calculate volume change of the right ventricle
RTVBF=R(19); RPVBF=R(20); R_SANO=R(15);

deltaVolume = ( P(9) - P(10) ) / R(9) * ( P(9) > P(10) )   -   ( P(10) - P(11) ) / R(10) * ( P(10) > P(11) ) * (~S1) ...
              +( P(11) - P(10) ) / RPVBF * ( P(11) > P(10) ) * (~S1)   -   ( P(10) - P(9) ) / RTVBF * ( P(10) > P(9) ) ...
              -( P(10) - P(4) ) / R(10) * ( P(10) > P(4 )) * (S1)   -   ( P(10) - P(11) ) / R_SANO ...
              +( P(4) - P(10) ) / RPVBF * ( P(4) > P(10) ) * (S1)  ;          
end

function deltaVolume = dv11(P, R, Stage)
% Calculate volume change of the main pulmonary artery
RPVBF=R(20); R_SANO=R(15); R_Fenestration=R(16); R_PDA = R(13);
S1=Stage(1); S2=Stage(2); S3=Stage(3);

deltaVolume = ( P(10) - P(11) ) / R(10) * ( P(10) > P(11) ) * (~S1)   -   ( P(11) - P(12) ) / R(11)   ...
               -( P(11) - P(10) ) / RPVBF * ( P(11) > P(10) ) * (~S1) ...
               +( P(10) - P(11) ) / R_SANO + ( P(8) - P(11) ) / R(8) * (S2) + ( P(7) - P(11) ) / R(7) * (S3) ...
               +( P(9) - P(11) ) / R_Fenestration ...
               -( P(11) - P(4) ) / ( R(11) + R_PDA );             
end

function deltaVolume = dv12(P, R)
% Calculate volume change of the pulmonary veins
deltaVolume = ( P(11) - P(12) ) / R(11)  - ( P(12) - P(1) ) / R(12);
end

